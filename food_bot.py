import os
import random
import nest_asyncio
import datetime

nest_asyncio.apply()

import asyncio
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ContextTypes, filters, CallbackQueryHandler
)

TOKEN = os.getenv("BOT_TOKEN")

MENU = {
    "üç≥ –ó–∞–≤—Ç—Ä–∞–∫": {
        "–Ø–∏—á–Ω–∏—Ü–∞": ("1 –ø–æ—Ü–µ–ª—É–π—á–∏–∫", ),
        "–ö–æ—Ñ–µ": ("1 –æ–±–Ω–∏–º–∞—à–∫–∞", ),
        "–û–º–ª–µ—Ç": ("2 –ø–æ—Ü–µ–ª—É–π—á–∏–∫–∞", ),
        "–®–æ–∫–æ–ª–∞–¥–∫–∞": ("3 –æ–±–Ω–∏–º–∞—à–∫–∏", ),
        "–ü–µ—á–µ–Ω—å–µ": ("2 –ø–æ—Ü–µ–ª—É–π—á–∏–∫–∞", ),
        "–ô–æ–≥—É—Ä—Ç": ("1 –æ–±–Ω–∏–º–∞—à–∫–∞", ),
        "–¢–≤–æ—Ä–æ–≥": ("1 –ø–æ—Ü–µ–ª—É–π—á–∏–∫", ),
        "–ß–∞–π —Å –º–µ–º–∞–º–∏-–∫–æ—Ç–∏–∫–∞–º–∏": ("1 –æ–±–Ω–∏–º–∞—à–∫–∞", )
    },
    "ü•£ –û–±–µ–¥": {
        "–ü–µ—Ä–≤–æ–µ": {
            "–ë–æ—Ä—â": ("2 –ø–æ—Ü–µ–ª—É–π—á–∏–∫–∞", ),
            "–ì–æ—Ä–æ—Ö–æ–≤—ã–π —Å—É–ø": ("1 –ø–æ—Ü–µ–ª—É–π—á–∏–∫", ),
            "–°—É–ø–µ—Ü –∏–∑ –î—ã–Ω–∏": ("3 –æ–±–Ω–∏–º–∞—à–∫–∏", )
        },
        "–í—Ç–æ—Ä–æ–µ": {
            "–†–∏—Å": ("2 –ø–æ—Ü–µ–ª—É–π—á–∏–∫–∞", ),
            "–û–≤–æ—â–∏": ("2 –æ–±–Ω–∏–º–∞—à–∫–∏", ),
            "–ì—Ä–µ—á–∫–∞": ("2 –æ–±–Ω–∏–º–∞—à–∫–∏", ),
            "–°–ø–∞–≥–µ—Ç—Ç–∏": ("3 –ø–æ—Ü–µ–ª—É–π—á–∏–∫–∞", ),
            "–ñ–∞—Ä–µ–Ω–Ω–∞—è –∫–∞—Ä—Ç–æ—à–µ—á–∫–∞": ("3 –ø–æ—Ü–µ–ª—É–π—á–∏–∫–∞", ),
            "–†—ã–±–∫–∞": ("3 –æ–±–Ω–∏–º–∞—à–∫–∏", )
        }
    },
    "üåô –£–∂–∏–Ω": {
        "–†–∏—Å": ("2 –ø–æ—Ü–µ–ª—É–π—á–∏–∫–∞", ),
        "–û–≤–æ—â–∏": ("2 –æ–±–Ω–∏–º–∞—à–∫–∏", ),
        "–ì—Ä–µ—á–∫–∞": ("2 –æ–±–Ω–∏–º–∞—à–∫–∏", ),
        "–°–ø–∞–≥–µ—Ç—Ç–∏": ("3 –ø–æ—Ü–µ–ª—É–π—á–∏–∫–∞", ),
        "–ñ–∞—Ä–µ–Ω–Ω–∞—è –∫–∞—Ä—Ç–æ—à–µ—á–∫–∞": ("3 –ø–æ—Ü–µ–ª—É–π—á–∏–∫–∞", ),
        "–†—ã–±–∫–∞": ("3 –æ–±–Ω–∏–º–∞—à–∫–∏", )
    },
    "üçï \"–ü–æ–ª–µ–∑–Ω–∞—è –µ–¥–∞\"": {
        "–ü–∏—Ü—Ü–∞": ("1 –æ–±–Ω–∏–º–∞—à–∫–∞ –∏ 3 –ø–æ—Ü–µ–ª—É—è", ),
        "–ß–∏–ø—Å–∏–∫–∏": ("3 –ø–æ—Ü–µ–ª—É—è", ),
        "–ü–∏–≤–∞—Å–∏–∫": ("1 –ø–æ—Ü–µ–ª—É–π", ),
        "–í–∏–Ω–æ": ("10 –ø–æ—Ü–µ–ª—É–µ–≤ –∏ 2 –æ–±–Ω–∏–º–∞—à–∫–∏", ),
        "–°—Ö–æ–¥–∏—Ç—å –≤ —Ä–µ—Å—Ç–∏–∫": ("50 –ø–æ—Ü–µ–ª—É–π—á–∏–∫–æ–≤", )
    }
}

user_baskets = {}  # {user_id: [items]}
order_history = {}  # {user_id: {date: [items]}}
user_profiles = {}  # {user_id: {"username": ..., "first_name": ...}}

def get_today():
    return datetime.date.today().isoformat()

def get_main_keyboard():
    return ReplyKeyboardMarkup([
        [KeyboardButton("–°—Ç–∞—Ä—Ç"), KeyboardButton("–°—Ç–æ–ø")],
        [KeyboardButton("üß∫ –ö–æ—Ä–∑–∏–Ω–∞"), KeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑")],
        [KeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É"), KeyboardButton("üìú –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤")],
        [KeyboardButton("üî• –¢–û–ü –∑–∞–∫–∞–∑—á–∏–∫–æ–≤")]
    ], resize_keyboard=True)

def category_keyboard():
    return ReplyKeyboardMarkup(
        [[KeyboardButton(cat)] for cat in MENU.keys()] + [[KeyboardButton("üîô –ù–∞–∑–∞–¥")]],
        resize_keyboard=True
    )

def submenu_keyboard(submenu):
    return ReplyKeyboardMarkup(
        [[KeyboardButton(dish)] for dish in submenu.keys()] + [[KeyboardButton("üîô –ù–∞–∑–∞–¥")]],
        resize_keyboard=True
    )

def count_total(items):
    kisses = 0
    hugs = 0
    for item in items:
        parts = item.split("‚Äî")
        if len(parts) < 2:
            continue
        price_text = parts[1].strip()
        # –°—á–∏—Ç–∞–µ–º –ø–æ—Ü–µ–ª—É–∏
        for word in price_text.split():
            if "–ø–æ—Ü–µ–ª" in word:
                num = ''.join(filter(str.isdigit, word))
                if num.isdigit():
                    kisses += int(num)
        # –°—á–∏—Ç–∞–µ–º –æ–±–Ω–∏–º–∞—à–∫–∏
        for word in price_text.split():
            if "–æ–±–Ω–∏–º" in word:
                num = ''.join(filter(str.isdigit, word))
                if num.isdigit():
                    hugs += int(num)
    return kisses, hugs

async def send_random_meme(update, item_str):
    memes_folder = "memes"
    try:
        meme_files = [f for f in os.listdir(memes_folder) if f.lower().endswith((".jpg", ".jpeg", ".png"))]
    except FileNotFoundError:
        meme_files = []
    if meme_files:
        meme_path = os.path.join(memes_folder, random.choice(meme_files))
        with open(meme_path, "rb") as photo:
            await update.message.reply_photo(photo, caption=f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É: {item_str}")
    else:
        await update.message.reply_text(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É: {item_str}")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_profiles[user.id] = {"username": user.username, "first_name": user.first_name}
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏ '–°—Ç–∞—Ä—Ç' —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é.", reply_markup=get_main_keyboard())

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text

    if text == "–°—Ç–∞—Ä—Ç":
        await update.message.reply_text("–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –º–µ–Ω—é:", reply_markup=category_keyboard())

    elif text == "–°—Ç–æ–ø":
        await update.message.reply_text("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –î–ª—è —Å—Ç–∞—Ä—Ç–∞ –Ω–∞–∂–º–∏ '–°—Ç–∞—Ä—Ç'.", reply_markup=None)

    elif text == "üîô –ù–∞–∑–∞–¥":
        await update.message.reply_text("–í–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=get_main_keyboard())

    elif text == "üß∫ –ö–æ—Ä–∑–∏–Ω–∞":
        items = user_baskets.get(user_id, [])
        if not items:
            await update.message.reply_text("üß∫ –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
        else:
            kisses, hugs = count_total(items)
            text_resp = "üß∫ –í–∞—à –∑–∞–∫–∞–∑:\n" + "\n".join(f"‚Ä¢ {item}" for item in items)
            text_resp += f"\n\nüíã –ü–æ—Ü–µ–ª—É–π—á–∏–∫–æ–≤: {kisses}\nü§ó –û–±–Ω–∏–º–∞—à–µ–∫: {hugs}\n\n–í—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å –±–ª—é–¥–æ, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ."
            keyboard = [[InlineKeyboardButton(f"‚ùå {i+1}", callback_data=f"del_{i}") for i in range(len(items))]]
            await update.message.reply_text(text_resp, reply_markup=InlineKeyboardMarkup(keyboard))

    elif text == "üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É":
        user_baskets[user_id] = []
        await update.message.reply_text("üóëÔ∏è –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞.")

    elif text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑":
        today = get_today()
        items = user_baskets.get(user_id, [])
        if not items:
            await update.message.reply_text("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –î–æ–±–∞–≤—å—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å.")
        else:
            order_history.setdefault(user_id, {}).setdefault(today, []).extend(items)
            user_baskets[user_id] = []
            await update.message.reply_text("‚úÖ –ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –∏—Å—Ç–æ—Ä–∏–∏!")

    elif text == "üìú –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤":
        hist = order_history.get(user_id, {})
        if not hist:
            await update.message.reply_text("–£ –≤–∞—Å –µ—â—ë –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤.")
        else:
            text_resp = "üìú –í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤:\n"
            for date, items in hist.items():
                text_resp += f"\nüìÖ {date}:\n" + "\n".join(f"‚Ä¢ {item}" for item in items)
            await update.message.reply_text(text_resp)

    elif text == "üî• –¢–û–ü –∑–∞–∫–∞–∑—á–∏–∫–æ–≤":
        scores = []
        for uid, days in order_history.items():
            all_items = sum(days.values(), [])
            kisses, hugs = count_total(all_items)
            user = user_profiles.get(uid, {})
            name = user.get("username") or user.get("first_name") or f"id{uid}"
            scores.append((name, kisses, hugs))
        scores.sort(key=lambda x: (x[1] + x[2]), reverse=True)
        if not scores:
            await update.message.reply_text("–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ —Å–¥–µ–ª–∞–ª –∑–∞–∫–∞–∑–æ–≤.")
        else:
            resp = "üî• –¢–û–ü –∑–∞–∫–∞–∑—á–∏–∫–æ–≤:\n"
            for i, (name, k, h) in enumerate(scores[:10], 1):
                resp += f"{i}. {name}: üíã {k}, ü§ó {h}\n"
            await update.message.reply_text(resp)

    # –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–µ–Ω—é
    elif text in MENU.keys():
        if text == "ü•£ –û–±–µ–¥":
            keyboard = ReplyKeyboardMarkup(
                [[KeyboardButton("–ü–µ—Ä–≤–æ–µ")], [KeyboardButton("–í—Ç–æ—Ä–æ–µ")], [KeyboardButton("üîô –ù–∞–∑–∞–¥")]],
                resize_keyboard=True
            )
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é –û–±–µ–¥–∞:", reply_markup=keyboard)
        else:
            dishes = MENU[text]
            keyboard = submenu_keyboard(dishes)
            await update.message.reply_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–æ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {text}:", reply_markup=keyboard)

    # –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ–±–µ–¥–∞
    elif text in ["–ü–µ—Ä–≤–æ–µ", "–í—Ç–æ—Ä–æ–µ"]:
        dishes = MENU["ü•£ –û–±–µ–¥"].get(text, {})
        keyboard = submenu_keyboard(dishes)
        await update.message.reply_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–æ –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ {text}:", reply_markup=keyboard)

    # –í—ã–±–æ—Ä –±–ª—é–¥–∞ (—É—á–∏—Ç—ã–≤–∞–µ–º –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç—å)
    else:
        found = False
        for cat, dishes in MENU.items():
            if isinstance(dishes, dict):
                # –ü—Ä—è–º—ã–µ –±–ª—é–¥–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–ó–∞–≤—Ç—Ä–∞–∫, –£–∂–∏–Ω, –ü–æ–ª–µ–∑–Ω–∞—è –µ–¥–∞)
                if all(isinstance(v, tuple) for v in dishes.values()):
                    if text in dishes:
                        price = dishes[text][0]
                        item_str = f"{text} ‚Äî {price}"
                        user_baskets.setdefault(user_id, []).append(item_str)
                        await send_random_meme(update, item_str)
                        found = True
                        break
                else:
                    # –í–ª–æ–∂–µ–Ω–Ω—ã–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä –æ–±–µ–¥
                    for subcat in dishes.values():
                        if isinstance(subcat, dict) and text in subcat:
                            price = subcat[text][0]
                            item_str = f"{text} ‚Äî {price}"
                            user_baskets.setdefault(user_id, []).append(item_str)
                            await send_random_meme(update, item_str)
                            found = True
                            break
                if found:
                    break
        if not found:
            await update.message.reply_text("‚ùì –ù–µ –ø–æ–Ω—è–ª, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –º–µ–Ω—é.")

async def delete_item(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    index = int(query.data.replace("del_", ""))
    if user_id in user_baskets and 0 <= index < len(user_baskets[user_id]):
        removed = user_baskets[user_id].pop(index)
        await query.edit_message_text(f"‚ùå –£–¥–∞–ª–µ–Ω–æ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã: {removed}")

async def main():
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(CallbackQueryHandler(delete_item))
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await app.run_polling()

if __name__ == "__main__":
    asyncio.run(main())
