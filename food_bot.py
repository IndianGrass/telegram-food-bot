import asyncio
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    ApplicationBuilder, CommandHandler,
    MessageHandler, ContextTypes, filters
)

# –í—Å—Ç–∞–≤—å —Å—é–¥–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω –æ—Ç BotFather (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏)
TOKEN = "7864140185:AAHJAg-aEkxT0J4KSHeSJcleuGYDOZ7_1UY"

MENU = {
    "ü•£ –ü–µ—Ä–≤–æ–µ": {
        "–ì–æ—Ä–æ—Ö–æ–≤—ã–π —Å—É–ø": "1 –ø–æ—Ü–µ–ª—É–π—á–∏–∫",
        "–ë–æ—Ä—â": "2 –ø–æ—Ü–µ–ª—É–π—á–∏–∫–∞",
        "–°—É–ø–µ—Ü –∏–∑ –î—ã–Ω–∏": "3 –æ–±–Ω–∏–º–∞—à–∫–∏"
    },
    "üçó –í—Ç–æ—Ä–æ–µ": {
        "–ñ–∞—Ä–µ–Ω–Ω–∞—è –∫–∞—Ä—Ç–æ—à–µ—á–∫–∞": "3 –ø–æ—Ü–µ–ª—É–π—á–∏–∫–∞",
        "–ì—Ä–µ—á–∫–∞": "2 –æ–±–Ω–∏–º–∞—à–∫–∏",
        "–†–∏—Å": "2 –ø–æ—Ü–µ–ª—É–π—á–∏–∫–∞",
        "–ü–ª–æ–≤": "3 –æ–±–Ω–∏–º–∞—à–∫–∏",
        "–ú–∞–∫–∞—Ä–æ—à–∫–∏": "1 –ø–æ—Ü–µ–ª—É–π—á–∏–∫",
        "–û–º–ª–µ—Ç": "2 –ø–æ—Ü–µ–ª—É–π—á–∏–∫–∞"
    },
    "ü•§ –ù–∞–ø–∏—Ç–∫–∏": {
        "–ö–æ—Ñ–µ": "1 –æ–±–Ω–∏–º–∞—à–∫–∞",
        "–ß–∞–π-—á–∞–π-–≤—ã—Ä—É—á–∞–π": "1 –ø–æ—Ü–µ–ª—É–π—á–∏–∫",
        "–í–æ–¥–∞–∞–∞–∞": "–±–µ—Å–ø–ª–∞—Ç–Ω–æ üíß"
    }
}

user_baskets = {}

def category_keyboard():
    keyboard = [[KeyboardButton(cat)] for cat in MENU.keys()]
    keyboard.append([KeyboardButton("üß∫ –ö–æ—Ä–∑–∏–Ω–∞"), KeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É")])
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def count_total(basket_items):
    kisses, hugs = 0, 0
    for item in basket_items:
        if "–ø–æ—Ü–µ–ª—É–π—á–∏–∫" in item:
            kisses += int(item.split()[1])
        elif "–æ–±–Ω–∏–º–∞—à–∫" in item:
            hugs += int(item.split()[1])
    return kisses, hugs

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –º–µ–Ω—é üëá", reply_markup=category_keyboard())

async def basket(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    items = user_baskets.get(user_id, [])
    if not items:
        await update.message.reply_text("üß∫ –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
    else:
        kisses, hugs = count_total(items)
        text = "üß∫ –í–∞—à –∑–∞–∫–∞–∑:\n" + "\n".join(f"‚Ä¢ {item}" for item in items)
        text += f"\n\nüíã –ü–æ—Ü–µ–ª—É–π—á–∏–∫–æ–≤: {kisses}\nü§ó –û–±–Ω–∏–º–∞—à–µ–∫: {hugs}"
        await update.message.reply_text(text)

async def clear_basket(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_baskets[user_id] = []
    await update.message.reply_text("üóëÔ∏è –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞.")

async def all_orders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not user_baskets:
        await update.message.reply_text("–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –∑–∞–∫–∞–∑–∞–ª.")
        return
    text = "üìã –í—Å–µ –∑–∞–∫–∞–∑—ã:\n"
    for user_id, basket in user_baskets.items():
        name = f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}"
        kisses, hugs = count_total(basket)
        orders = "\n".join(f"   ‚Ä¢ {item}" for item in basket)
        summary = f"   üíã {kisses} –ø–æ—Ü–µ–ª—É–π—á–∏–∫–æ–≤, ü§ó {hugs} –æ–±–Ω–∏–º–∞—à–µ–∫"
        text += f"\n{name}:\n{orders}\n{summary}\n"
    await update.message.reply_text(text)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text

    print(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}: {text}")  # –õ–æ–≥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏

    if text == "üîô –ù–∞–∑–∞–¥":
        await start(update, context)
    elif text == "üß∫ –ö–æ—Ä–∑–∏–Ω–∞":
        await basket(update, context)
    elif text == "üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É":
        await clear_basket(update, context)
    elif text in MENU:
        dishes = MENU[text]
        keyboard = [[KeyboardButton(dish)] for dish in dishes]
        keyboard.append([KeyboardButton("üîô –ù–∞–∑–∞–¥")])
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–æ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {text}:", reply_markup=reply_markup)
    else:
        for category, items in MENU.items():
            if text in items:
                price = items[text]
                user_baskets.setdefault(user_id, []).append(f"{text} ‚Äî {price}")
                await update.message.reply_text(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É: {text} ({price})")
                return
        await update.message.reply_text("‚ùì –ù–µ –ø–æ–Ω—è–ª. –í—ã–±–µ—Ä–∏ –∏–∑ –º–µ–Ω—é.")

async def main():
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("basket", basket))
    app.add_handler(CommandHandler("clear", clear_basket))
    app.add_handler(CommandHandler("allorders", all_orders))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")

    await app.initialize()
    await app.start()
    await app.updater.start_polling()

# –ù–ï –ó–ê–ë–£–î–¨ –ü–†–û –û–¢–°–¢–£–ü–´ ‚Üë‚Üë‚Üë


if __name__ == "__main__":
    try:
        loop = asyncio.get_event_loop()
        loop.create_task(main())
        loop.run_forever()
    except (KeyboardInterrupt, SystemExit):
        print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é.")
