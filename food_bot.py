import asyncio
import os
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from telegram.ext import (
    ApplicationBuilder, CommandHandler,
    MessageHandler, ContextTypes, filters
)
from collections import defaultdict
from datetime import datetime

TOKEN = os.getenv("BOT_TOKEN")

MENU = {
    "ü•£ –ü–µ—Ä–≤–æ–µ": {
        "–ì–æ—Ä–æ—Ö–æ–≤—ã–π —Å—É–ø": "1 –ø–æ—Ü–µ–ª—É–π—á–∏–∫",
        "–ë–æ—Ä—â": "2 –ø–æ—Ü–µ–ª—É–π—á–∏–∫–∞",
        "–°—É–ø–µ—Ü –∏–∑ –î—ã–Ω–∏": "3 –æ–±–Ω–∏–º–∞—à–∫–∏"
    },
    "üçó –í—Ç–æ—Ä–æ–µ": {
        "–ñ–∞—Ä–µ–Ω–Ω–∞—è –∫–∞—Ä—Ç–æ—à–µ—á–∫–∞": "3 –ø–æ—Ü–µ–ª—É–π—á–∏–∫–∞",
        "–ì—Ä–µ—á–∫–∞": "2 –æ–±–Ω–∏–º–∞—à–∫–∏",
        "–†–∏—Å": "2 –ø–æ—Ü–µ–ª—É–π—á–∏–∫–∞",
        "–ü–ª–æ–≤": "3 –æ–±–Ω–∏–º–∞—à–∫–∏",
        "–ú–∞–∫–∞—Ä–æ—à–∫–∏": "1 –ø–æ—Ü–µ–ª—É–π—á–∏–∫",
        "–û–º–ª–µ—Ç": "2 –ø–æ—Ü–µ–ª—É–π—á–∏–∫–∞"
    },
    "ü•§ –ù–∞–ø–∏—Ç–∫–∏": {
        "–ö–æ—Ñ–µ": "1 –æ–±–Ω–∏–º–∞—à–∫–∞",
        "–ß–∞–π-—á–∞–π-–≤—ã—Ä—É—á–∞–π": "1 –ø–æ—Ü–µ–ª—É–π—á–∏–∫",
        "–í–æ–¥–∞–∞–∞–∞": "–±–µ—Å–ø–ª–∞—Ç–Ω–æ üíß"
    }
}

user_baskets = defaultdict(list)
order_history = defaultdict(list)
users = {}

def category_keyboard():
    keyboard = [[KeyboardButton(cat)] for cat in MENU.keys()]
    keyboard.append([
        KeyboardButton("üß∫ –ö–æ—Ä–∑–∏–Ω–∞"),
        KeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É")
    ])
    keyboard.append([
        KeyboardButton("üìñ –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤"), KeyboardButton("‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑")
    ])
    keyboard.append([
        KeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –±–ª—é–¥–æ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã"), KeyboardButton("üîù –¢–û–ü –∑–∞–∫–∞–∑—á–∏–∫–æ–≤")
    ])
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def count_total(basket_items):
    kisses, hugs = 0, 0
    for item in basket_items:
        if "–ø–æ—Ü–µ–ª—É–π—á–∏–∫" in item:
            try:
                kisses += int(item.split()[1])
            except:
                pass
        elif "–æ–±–Ω–∏–º–∞—à–∫" in item:
            try:
                hugs += int(item.split()[1])
            except:
                pass
    return kisses, hugs

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –º–µ–Ω—é üëá", reply_markup=category_keyboard())

async def basket(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    items = user_baskets.get(user_id, [])
    if not items:
        await update.message.reply_text("üß∫ –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
    else:
        kisses, hugs = count_total(items)
        text = "üß∫ –í–∞—à –∑–∞–∫–∞–∑:\n" + "\n".join(f"‚Ä¢ {item}" for item in items)
        text += f"\n\nüíã –ü–æ—Ü–µ–ª—É–π—á–∏–∫–æ–≤: {kisses}\nü§ó –û–±–Ω–∏–º–∞—à–µ–∫: {hugs}"
        await update.message.reply_text(text)

async def clear_basket(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_baskets[user_id] = []
    await update.message.reply_text("üóëÔ∏è –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞.")

async def show_history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    history = order_history.get(user_id, [])
    if not history:
        await update.message.reply_text("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤.")
    else:
        text = "üìñ –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤:\n"
        for date, items in history:
            text += f"üìÖ {date}:\n" + "\n".join(f"‚Ä¢ {i}" for i in items) + "\n\n"
        await update.message.reply_text(text)

async def confirm_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    items = user_baskets.get(user_id, [])
    if not items:
        await update.message.reply_text("üß∫ –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –≤ –∫–æ—Ä–∑–∏–Ω—É!")
        return
    today = datetime.now().strftime("%Y-%m-%d")
    order_history[user_id].append((today, items.copy()))
    user_baskets[user_id] = []
    await update.message.reply_text("‚úÖ –ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –∏—Å—Ç–æ—Ä–∏–∏! üìù")

async def delete_item_from_basket(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    basket = user_baskets.get(user_id, [])
    if not basket:
        await update.message.reply_text("üß∫ –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
        return
    keyboard = [[KeyboardButton(item)] for item in basket]
    keyboard.append([KeyboardButton("üîô –ù–∞–∑–∞–¥")])
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —É–¥–∞–ª–∏—Ç—å:", reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))
    context.user_data['delete_mode'] = True

async def show_top_users(update: Update, context: ContextTypes.DEFAULT_TYPE):
    stats = []
    for uid, history in order_history.items():
        total_kiss, total_hug = 0, 0
        for _, items in history:
            k, h = count_total(items)
            total_kiss += k
            total_hug += h
        name = users.get(uid, {}).get("username") or users.get(uid, {}).get("first_name") or f"ID {uid}"
        stats.append((name, total_kiss, total_hug))
    if not stats:
        await update.message.reply_text("–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¢–û–ü–∞.")
        return
    stats.sort(key=lambda x: (x[1], x[2]), reverse=True)
    text = "üîù –¢–û–ü –∑–∞–∫–∞–∑—á–∏–∫–æ–≤:\n"
    for i, (name, kiss, hug) in enumerate(stats, 1):
        text += f"{i}. {name} ‚Äî üíã {kiss}, ü§ó {hug}\n"
    await update.message.reply_text(text)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    username = update.effective_user.username
    first_name = update.effective_user.first_name
    if user_id not in users:
        users[user_id] = {"username": username, "first_name": first_name}

    text = update.message.text

    if context.user_data.get('delete_mode'):
        context.user_data['delete_mode'] = False
        if text == "üîô –ù–∞–∑–∞–¥":
            await start(update, context)
            return
        try:
            user_baskets[user_id].remove(text)
            await update.message.reply_text(f"‚ùå –£–¥–∞–ª–µ–Ω–æ: {text}", reply_markup=category_keyboard())
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=category_keyboard())
        return

    if text == "üîô –ù–∞–∑–∞–¥":
        await start(update, context)
    elif text == "üß∫ –ö–æ—Ä–∑–∏–Ω–∞":
        await basket(update, context)
    elif text == "üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É":
        await clear_basket(update, context)
    elif text == "üìñ –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤":
        await show_history(update, context)
    elif text == "‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑":
        await confirm_order(update, context)
    elif text == "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –±–ª—é–¥–æ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã":
        await delete_item_from_basket(update, context)
    elif text == "üîù –¢–û–ü –∑–∞–∫–∞–∑—á–∏–∫–æ–≤":
        await show_top_users(update, context)
    elif text in MENU:
        dishes = MENU[text]
        keyboard = [[KeyboardButton(dish)] for dish in dishes]
        keyboard.append([KeyboardButton("üîô –ù–∞–∑–∞–¥")])
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–æ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {text}:", reply_markup=reply_markup)
    else:
        for category, items in MENU.items():
            if text in items:
                price = items[text]
                user_baskets[user_id].append(f"{text} ‚Äî {price}")
                await update.message.reply_text(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É: {text} ({price})")
                return
        await update.message.reply_text("‚ùì –ù–µ –ø–æ–Ω—è–ª. –í—ã–±–µ—Ä–∏ –∏–∑ –º–µ–Ω—é.")

async def main():
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await app.run_polling()

if __name__ == "__main__":
    import nest_asyncio
    nest_asyncio.apply()

    loop = asyncio.get_event_loop()
    loop.create_task(main())
    loop.run_forever()

