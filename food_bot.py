import asyncio
import os
import random
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    ApplicationBuilder, CommandHandler,
    MessageHandler, ContextTypes, filters
)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("BOT_TOKEN")

# –ú–µ–Ω—é –±–æ—Ç–∞
MENU = {
    "ü•£ –ü–µ—Ä–≤–æ–µ": {
        "–ì–æ—Ä–æ—Ö–æ–≤—ã–π —Å—É–ø": "1 –ø–æ—Ü–µ–ª—É–π—á–∏–∫",
        "–ë–æ—Ä—â": "2 –ø–æ—Ü–µ–ª—É–π—á–∏–∫–∞",
        "–°—É–ø–µ—Ü –∏–∑ –î—ã–Ω–∏": "3 –æ–±–Ω–∏–º–∞—à–∫–∏"
    },
    "üçó –í—Ç–æ—Ä–æ–µ": {
        "–ñ–∞—Ä–µ–Ω–Ω–∞—è –∫–∞—Ä—Ç–æ—à–µ—á–∫–∞": "3 –ø–æ—Ü–µ–ª—É–π—á–∏–∫–∞",
        "–ì—Ä–µ—á–∫–∞": "2 –æ–±–Ω–∏–º–∞—à–∫–∏",
        "–†–∏—Å": "2 –ø–æ—Ü–µ–ª—É–π—á–∏–∫–∞",
        "–ü–ª–æ–≤": "3 –æ–±–Ω–∏–º–∞—à–∫–∏",
        "–ú–∞–∫–∞—Ä–æ—à–∫–∏": "1 –ø–æ—Ü–µ–ª—É–π—á–∏–∫",
        "–û–º–ª–µ—Ç": "2 –ø–æ—Ü–µ–ª—É–π—á–∏–∫–∞"
    },
    "ü•§ –ù–∞–ø–∏—Ç–∫–∏": {
        "–ö–æ—Ñ–µ": "1 –æ–±–Ω–∏–º–∞—à–∫–∞",
        "–ß–∞–π-—á–∞–π-–≤—ã—Ä—É—á–∞–π": "1 –ø–æ—Ü–µ–ª—É–π—á–∏–∫",
        "–í–æ–¥–∞–∞–∞–∞": "–±–µ—Å–ø–ª–∞—Ç–Ω–æ üíß"
    }
}

# –•—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_baskets = {}
user_history = {}
users = {}  # user_id -> {username, first_name}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å—Ç–∞—Ä—Ç–æ–≤–∞—è
def start_keyboard():
    return ReplyKeyboardMarkup(
        [[KeyboardButton("‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç")], [KeyboardButton("‚õî –°—Ç–æ–ø")]],
        resize_keyboard=True
    )

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –º–µ–Ω—é
def category_keyboard():
    keyboard = [[KeyboardButton(cat)] for cat in MENU.keys()]
    keyboard.append([KeyboardButton("üß∫ –ö–æ—Ä–∑–∏–Ω–∞"), KeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É")])
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# –ü–æ–¥—Å—á—ë—Ç –∏—Ç–æ–≥–æ–≤–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏
def count_total(basket_items):
    kisses, hugs = 0, 0
    for item in basket_items:
        try:
            if "–ø–æ—Ü–µ–ª—É–π—á–∏–∫" in item:
                num = int(item.split()[-2])
                kisses += num
            elif "–æ–±–Ω–∏–º–∞—à–∫" in item:
                num = int(item.split()[-2])
                hugs += num
        except (IndexError, ValueError):
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å: {item}")
    return kisses, hugs

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏ ‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –µ–¥—É, –∏–ª–∏ ‚õî –°—Ç–æ–ø, —á—Ç–æ–±—ã –≤—ã–π—Ç–∏.",
        reply_markup=start_keyboard()
    )

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã
async def basket(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    items = user_baskets.get(user_id, [])
    if not items:
        await update.message.reply_text("üß∫ –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
    else:
        kisses, hugs = count_total(items)
        text = "üß∫ –í–∞—à –∑–∞–∫–∞–∑:\n" + "\n".join(f"‚Ä¢ {item}" for item in items)
        text += f"\n\nüíã –ü–æ—Ü–µ–ª—É–π—á–∏–∫–æ–≤: {kisses}\nü§ó –û–±–Ω–∏–º–∞—à–µ–∫: {hugs}"
        await update.message.reply_text(text)

# –û—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã
async def clear_basket(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_baskets[user_id] = []
    await update.message.reply_text("üóëÔ∏è –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞.")

# –ü–æ–∫–∞–∑ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤
async def all_orders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not user_baskets:
        await update.message.reply_text("–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –∑–∞–∫–∞–∑–∞–ª.")
        return

    text = "üìã –í—Å–µ –∑–∞–∫–∞–∑—ã:\n"
    for user_id, basket in user_baskets.items():
        user_info = users.get(user_id)
        if user_info:
            name = user_info["username"] or user_info["first_name"] or f"ID {user_id}"
        else:
            name = f"ID {user_id}"

        kisses, hugs = count_total(basket)
        orders = "\n".join(f"   ‚Ä¢ {item}" for item in basket)
        summary = f"   üíã {kisses} –ø–æ—Ü–µ–ª—É–π—á–∏–∫–æ–≤, ü§ó {hugs} –æ–±–Ω–∏–º–∞—à–µ–∫"
        text += f"\nüë§ {name}:\n{orders}\n{summary}\n"
    await update.message.reply_text(text)

# –ü–æ–∫–∞–∑ –ª–∏—á–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤
async def show_history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    history = user_history.get(user_id, [])
    if not history:
        await update.message.reply_text("üìñ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤.")
    else:
        text = "üìñ –í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤:\n" + "\n".join(f"‚Ä¢ {item}" for item in history)
        await update.message.reply_text(text)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    username = update.effective_user.username
    first_name = update.effective_user.first_name

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id not in users:
        users[user_id] = {"username": username, "first_name": first_name}

    text = update.message.text

    if text == "‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç":
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –º–µ–Ω—é üëá", reply_markup=category_keyboard())
        return

    elif text == "‚õî –°—Ç–æ–ø":
        await update.message.reply_text("–î–æ –≤—Å—Ç—Ä–µ—á–∏! üçΩÔ∏è", reply_markup=ReplyKeyboardMarkup([[]], resize_keyboard=True))
        return

    elif text == "üß∫ –ö–æ—Ä–∑–∏–Ω–∞":
        await basket(update, context)
        return

    elif text == "üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É":
        await clear_basket(update, context)
        return

    elif text in MENU:
        dishes = MENU[text]
        keyboard = [[KeyboardButton(dish)] for dish in dishes]
        keyboard.append([KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")])
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–æ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {text}:", reply_markup=reply_markup)
        return

    elif text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await update.message.reply_text("–í–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üìÖ", reply_markup=category_keyboard())
        return

    else:
        for category, items in MENU.items():
            if text in items:
                price = items[text]
                user_baskets.setdefault(user_id, []).append(f"{text} ‚Äî {price}")
                user_history.setdefault(user_id, []).append(f"{text} ‚Äî {price}")
                await update.message.reply_text(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É: {text} ({price})")
                return
        await update.message.reply_text("‚ùì –ù–µ –ø–æ–Ω—è–ª. –í—ã–±–µ—Ä–∏ –∏–∑ –º–µ–Ω—é.")

# –ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –∑–∞–ø—É—Å–∫–∞
async def main():
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("basket", basket))
    app.add_handler(CommandHandler("clear", clear_basket))
    app.add_handler(CommandHandler("allorders", all_orders))
    app.add_handler(CommandHandler("history", show_history))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")

    await app.initialize()
    await app.start()
    await app.updater.start_polling()

if __name__ == "__main__":
    try:
        loop = asyncio.get_event_loop()
        loop.create_task(main())
        loop.run_forever()
    except (KeyboardInterrupt, SystemExit):
        print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é.")
