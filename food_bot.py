import os
import nest_asyncio
nest_asyncio.apply()

import asyncio
from telegram import (
    Update, ReplyKeyboardMarkup, KeyboardButton, InputMediaPhoto
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ContextTypes, filters
)

TOKEN = os.getenv("BOT_TOKEN")

MENU = {
    "üç≥ –ó–∞–≤—Ç—Ä–∞–∫": {
        "–Ø–∏—á–Ω–∏—Ü–∞": ("1 –ø–æ—Ü–µ–ª—É–π—á–∏–∫", "https://i.imgur.com/0f7QyKx.jpg"),
        "–ö–æ—Ñ–µ": ("1 –æ–±–Ω–∏–º–∞—à–∫–∞", "https://i.imgur.com/LzAxGhr.jpg"),
        "–û–º–ª–µ—Ç": ("2 –ø–æ—Ü–µ–ª—É–π—á–∏–∫–∞", "https://i.imgur.com/H07v27c.jpg"),
        "–®–æ–∫–æ–ª–∞–¥–∫–∞": ("3 –æ–±–Ω–∏–º–∞—à–∫–∏", "https://i.imgur.com/DqkshM6.jpg"),
        "–ü–µ—á–µ–Ω—å–µ": ("2 –ø–æ—Ü–µ–ª—É–π—á–∏–∫–∞", "https://i.imgur.com/mj0xFvl.jpg"),
        "–ô–æ–≥—É—Ä—Ç": ("1 –æ–±–Ω–∏–º–∞—à–∫–∞", "https://i.imgur.com/pm7ZwwF.jpg"),
        "–¢–≤–æ—Ä–æ–≥": ("1 –ø–æ—Ü–µ–ª—É–π—á–∏–∫", "https://i.imgur.com/tYl6vhR.jpg"),
        "–ß–∞–π —Å –º–µ–º–∞–º–∏-–∫–æ—Ç–∏–∫–∞–º–∏": ("1 –æ–±–Ω–∏–º–∞—à–∫–∞", "https://i.imgur.com/svQno44.jpg")
    },
    "ü•£ –û–±–µ–¥": {
        "–ü–µ—Ä–≤–æ–µ": {
            "–ë–æ—Ä—â": ("2 –ø–æ—Ü–µ–ª—É–π—á–∏–∫–∞", "https://i.imgur.com/kEYs60V.jpg"),
            "–ì–æ—Ä–æ—Ö–æ–≤—ã–π —Å—É–ø": ("1 –ø–æ—Ü–µ–ª—É–π—á–∏–∫", "https://i.imgur.com/NmEjZqA.jpg"),
            "–°—É–ø–µ—Ü –∏–∑ –î—ã–Ω–∏": ("3 –æ–±–Ω–∏–º–∞—à–∫–∏", "https://i.imgur.com/gSLT2Kp.jpg")
        },
        "–í—Ç–æ—Ä–æ–µ": {
            "–†–∏—Å": ("2 –ø–æ—Ü–µ–ª—É–π—á–∏–∫–∞", "https://i.imgur.com/YzmXS2p.jpg"),
            "–û–≤–æ—â–∏": ("2 –æ–±–Ω–∏–º–∞—à–∫–∏", "https://i.imgur.com/VoLU50a.jpg"),
            "–ì—Ä–µ—á–∫–∞": ("2 –æ–±–Ω–∏–º–∞—à–∫–∏", "https://i.imgur.com/VoLU50a.jpg"),
            "–°–ø–∞–≥–µ—Ç—Ç–∏": ("3 –ø–æ—Ü–µ–ª—É–π—á–∏–∫–∞", "https://i.imgur.com/r4lYb8R.jpg"),
            "–ñ–∞—Ä–µ–Ω–Ω–∞—è –∫–∞—Ä—Ç–æ—à–µ—á–∫–∞": ("3 –ø–æ—Ü–µ–ª—É–π—á–∏–∫–∞", "https://i.imgur.com/Bsp37fz.jpg"),
            "–†—ã–±–∫–∞": ("3 –æ–±–Ω–∏–º–∞—à–∫–∏", "https://i.imgur.com/IfUpnWn.jpg")
        }
    },
    "üåô –£–∂–∏–Ω": {
        "–†–∏—Å": ("2 –ø–æ—Ü–µ–ª—É–π—á–∏–∫–∞", "https://i.imgur.com/YzmXS2p.jpg"),
        "–û–≤–æ—â–∏": ("2 –æ–±–Ω–∏–º–∞—à–∫–∏", "https://i.imgur.com/VoLU50a.jpg"),
        "–ì—Ä–µ—á–∫–∞": ("2 –æ–±–Ω–∏–º–∞—à–∫–∏", "https://i.imgur.com/VoLU50a.jpg"),
        "–°–ø–∞–≥–µ—Ç—Ç–∏": ("3 –ø–æ—Ü–µ–ª—É–π—á–∏–∫–∞", "https://i.imgur.com/r4lYb8R.jpg"),
        "–ñ–∞—Ä–µ–Ω–Ω–∞—è –∫–∞—Ä—Ç–æ—à–µ—á–∫–∞": ("3 –ø–æ—Ü–µ–ª—É–π—á–∏–∫–∞", "https://i.imgur.com/Bsp37fz.jpg"),
        "–†—ã–±–∫–∞": ("3 –æ–±–Ω–∏–º–∞—à–∫–∏", "https://i.imgur.com/IfUpnWn.jpg")
    },
    "üçï \"–ü–æ–ª–µ–∑–Ω–∞—è –µ–¥–∞\"": {
        "–ü–∏—Ü—Ü–∞": ("1 –æ–±–Ω–∏–º–∞—à–∫–∞ –∏ 3 –ø–æ—Ü–µ–ª—É—è", "https://i.imgur.com/w9L62vK.jpg"),
        "–ß–∏–ø—Å–∏–∫–∏": ("3 –ø–æ—Ü–µ–ª—É—è", "https://i.imgur.com/gd3HbXr.jpg"),
        "–ü–∏–≤–∞—Å–∏–∫": ("1 –ø–æ—Ü–µ–ª—É–π", "https://i.imgur.com/j6Z9vR2.jpg"),
        "–í–∏–Ω–æ": ("10 –ø–æ—Ü–µ–ª—É–µ–≤ –∏ 2 –æ–±–Ω–∏–º–∞—à–∫–∏", "https://i.imgur.com/kG7UMbH.jpg"),
        "–°—Ö–æ–¥–∏—Ç—å –≤ —Ä–µ—Å—Ç–∏–∫": ("50 –ø–æ—Ü–µ–ª—É–π—á–∏–∫–æ–≤", "https://i.imgur.com/6DLbdx8.jpg")
    }
}

user_baskets = {}
order_history = {}

def get_main_keyboard():
    return ReplyKeyboardMarkup(
        [
            [KeyboardButton("–°—Ç–∞—Ä—Ç"), KeyboardButton("–°—Ç–æ–ø")],
            [KeyboardButton("üß∫ –ö–æ—Ä–∑–∏–Ω–∞"), KeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É")],
            [KeyboardButton("üìú –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤")],
            [KeyboardButton("üî• –¢–û–ü –∑–∞–∫–∞–∑—á–∏–∫–æ–≤")]
        ],
        resize_keyboard=True
    )

def category_keyboard():
    return ReplyKeyboardMarkup(
        [[KeyboardButton(cat)] for cat in MENU.keys()] + [[KeyboardButton("üîô –ù–∞–∑–∞–¥")]],
        resize_keyboard=True
    )

def submenu_keyboard(submenu):
    return ReplyKeyboardMarkup(
        [[KeyboardButton(dish)] for dish in submenu.keys()] + [[KeyboardButton("üîô –ù–∞–∑–∞–¥")]],
        resize_keyboard=True
    )

def count_total(items):
    kisses = 0
    hugs = 0
    for item in items:
        parts = item.split("‚Äî")
        if len(parts) < 2:
            continue
        price_text = parts[1].strip()
        if "–æ–±–Ω–∏–º–∞—à–∫–∞" in price_text:
            try:
                hugs += int(''.join(filter(str.isdigit, price_text)))
            except:
                pass
        if "–ø–æ—Ü–µ–ª—É–π" in price_text:
            try:
                kisses += int(''.join(filter(str.isdigit, price_text)))
            except:
                pass
    return kisses, hugs

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏ '–°—Ç–∞—Ä—Ç' —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é, –∏–ª–∏ '–°—Ç–æ–ø' —á—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞.",
        reply_markup=get_main_keyboard()
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    username = update.effective_user.username or update.effective_user.first_name or str(user_id)
    text = update.message.text

    if text == "–°—Ç–∞—Ä—Ç":
        await update.message.reply_text("–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –º–µ–Ω—é:", reply_markup=category_keyboard())

    elif text == "–°—Ç–æ–ø":
        await update.message.reply_text("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –î–ª—è —Å—Ç–∞—Ä—Ç–∞ –Ω–∞–∂–º–∏ '–°—Ç–∞—Ä—Ç'.", reply_markup=None)

    elif text == "üîô –ù–∞–∑–∞–¥":
        await update.message.reply_text("–í–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=get_main_keyboard())

    elif text == "üß∫ –ö–æ—Ä–∑–∏–Ω–∞":
        items = user_baskets.get(user_id, [])
        if not items:
            await update.message.reply_text("üß∫ –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
        else:
            kisses, hugs = count_total(items)
            text_resp = "üß∫ –í–∞—à –∑–∞–∫–∞–∑:\n" + "\n".join(f"‚Ä¢ {item}" for item in items)
            text_resp += f"\n\nüíã –ü–æ—Ü–µ–ª—É–π—á–∏–∫–æ–≤: {kisses}\nü§ó –û–±–Ω–∏–º–∞—à–µ–∫: {hugs}"
            await update.message.reply_text(text_resp)

    elif text == "üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É":
        user_baskets[user_id] = []
        await update.message.reply_text("üóëÔ∏è –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞.")

    elif text == "üìú –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤":
        hist = order_history.get(user_id, [])
        if not hist:
            await update.message.reply_text("–£ –≤–∞—Å –µ—â—ë –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤.")
        else:
            text_resp = "üìú –í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤:\n" + "\n".join(hist)
            await update.message.reply_text(text_resp)

    elif text == "üî• –¢–û–ü –∑–∞–∫–∞–∑—á–∏–∫–æ–≤":
        top_users = []
        for uid, basket in order_history.items():
            kisses_total, hugs_total = count_total(basket)
            top_users.append((uid, kisses_total, hugs_total))
        top_users.sort(key=lambda x: (x[1] + x[2]), reverse=True)
        if not top_users:
            await update.message.reply_text("–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ —Å–¥–µ–ª–∞–ª –∑–∞–∫–∞–∑–æ–≤.")
        else:
            text_resp = "üî• –¢–û–ü –∑–∞–∫–∞–∑—á–∏–∫–æ–≤:\n"
            for i, (uid, kisses_t, hugs_t) in enumerate(top_users[:10], 1):
                text_resp += f"{i}. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid}: üíã {kisses_t}, ü§ó {hugs_t}\n"
            await update.message.reply_text(text_resp)

    elif text in MENU.keys():
        if text == "ü•£ –û–±–µ–¥":
            keyboard = ReplyKeyboardMarkup(
                [[KeyboardButton("–ü–µ—Ä–≤–æ–µ")], [KeyboardButton("–í—Ç–æ—Ä–æ–µ")], [KeyboardButton("üîô –ù–∞–∑–∞–¥")]],
                resize_keyboard=True
            )
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é –û–±–µ–¥–∞:", reply_markup=keyboard)
        else:
            dishes = MENU[text]
            if isinstance(dishes, dict):
                keyboard = submenu_keyboard(dishes)
                await update.message.reply_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–æ –∏–∑ {text}:", reply_markup=keyboard)

    elif text == "–ü–µ—Ä–≤–æ–µ":
        submenu = MENU["ü•£ –û–±–µ–¥"]["–ü–µ—Ä–≤–æ–µ"]
        keyboard = submenu_keyboard(submenu)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–æ –∏–∑ –ü–µ—Ä–≤–æ–≥–æ:", reply_markup=keyboard)

    elif text == "–í—Ç–æ—Ä–æ–µ":
        submenu = MENU["ü•£ –û–±–µ–¥"]["–í—Ç–æ—Ä–æ–µ"]
        keyboard = submenu_keyboard(submenu)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–æ –∏–∑ –í—Ç–æ—Ä–æ–≥–æ:", reply_markup=keyboard)

    elif text in MENU.get("ü•£ –û–±–µ–¥", {}).get("–ü–µ—Ä–≤–æ–µ", {}):
        dish = text
        price, meme_url = MENU["ü•£ –û–±–µ–¥"]["–ü–µ—Ä–≤–æ–µ"][dish]
        item_str = f"{dish} ‚Äî {price}"
        user_baskets.setdefault(user_id, []).append(item_str)
        order_history.setdefault(user_id, []).append(item_str)
        await update.message.reply_photo(meme_url, caption=f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É: {item_str}")

    elif text in MENU.get("ü•£ –û–±–µ–¥", {}).get("–í—Ç–æ—Ä–æ–µ", {}):
        dish = text
        price, meme_url = MENU["ü•£ –û–±–µ–¥"]["–í—Ç–æ—Ä–æ–µ"][dish]
        item_str = f"{dish} ‚Äî {price}"
        user_baskets.setdefault(user_id, []).append(item_str)
        order_history.setdefault(user_id, []).append(item_str)
        await update.message.reply_photo(meme_url, caption=f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É: {item_str}")

    else:
        found = False
        for cat, dishes in MENU.items():
            if isinstance(dishes, dict):
                for dish, value in dishes.items():
                    if isinstance(value, tuple) and dish == text:
                        price, meme_url = value
                        item_str = f"{dish} ‚Äî {price}"
                        user_baskets.setdefault(user_id, []).append(item_str)
                        order_history.setdefault(user_id, []).append(item_str)
                        await update.message.reply_photo(meme_url, caption=f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É: {item_str}")
                        found = True
                        break
            if found:
                break
        if not found:
            await update.message.reply_text("‚ùì –ù–µ –ø–æ–Ω—è–ª, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –º–µ–Ω—é.")

async def main():
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await app.run_polling()

if __name__ == "__main__":
    asyncio.run(main())
